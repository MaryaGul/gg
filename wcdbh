package com.example.footballquiz;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class WorldCupQuizActivity extends AppCompatActivity {

    private TextView textViewQuestion;
    private Button buttonOption1, buttonOption2, buttonOption3, buttonOption4, buttonExit;
    private SQLiteDatabase db;
    private Cursor cursor;
    private int currentQuestionIndex;
    private int correctAnswerIndex;
    private int correctAnswersCount;
    private List<Integer> questionIndices;

    private String username;
    private String quizType = "WorldCupQuiz"; // Example quiz type

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_quiz);

        textViewQuestion = findViewById(R.id.textViewQuestion);
        buttonOption1 = findViewById(R.id.buttonOption1);
        buttonOption2 = findViewById(R.id.buttonOption2);
        buttonOption3 = findViewById(R.id.buttonOption3);
        buttonOption4 = findViewById(R.id.buttonOption4);
        buttonExit = findViewById(R.id.buttonExit);

        username = getIntent().getStringExtra("username");

        WorldCupDatabaseHelper dbHelper = new WorldCupDatabaseHelper(this);
        db = dbHelper.getWritableDatabase();
        cursor = db.rawQuery("SELECT * FROM quiz", null);

        questionIndices = new ArrayList<>();
        for (int i = 0; i < cursor.getCount(); i++) {
            questionIndices.add(i);
        }
        Log.d("WorldCupQuizActivity", "Number of questions: " + questionIndices.size());
        Collections.shuffle(questionIndices);

        if (cursor.moveToFirst()) {
            currentQuestionIndex = 0;
            correctAnswersCount = 0;
            loadQuestion();
        } else {
            Log.e("WorldCupQuizActivity", "No questions found in database");
        }

        View.OnClickListener answerClickListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkAnswer((Button) v);
            }
        };

        buttonOption1.setOnClickListener(answerClickListener);
        buttonOption2.setOnClickListener(answerClickListener);
        buttonOption3.setOnClickListener(answerClickListener);
        buttonOption4.setOnClickListener(answerClickListener);

        buttonExit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showExitConfirmationDialog();
            }
        });
    }

    private void loadQuestion() {
        if (currentQuestionIndex < 10 && cursor.moveToPosition(questionIndices.get(currentQuestionIndex))) {
            String question = cursor.getString(cursor.getColumnIndexOrThrow("question"));
            String option1 = cursor.getString(cursor.getColumnIndexOrThrow("option1"));
            String option2 = cursor.getString(cursor.getColumnIndexOrThrow("option2"));
            String option3 = cursor.getString(cursor.getColumnIndexOrThrow("option3"));
            String option4 = cursor.getString(cursor.getColumnIndexOrThrow("option4"));
            int correctAnswer = cursor.getInt(cursor.getColumnIndexOrThrow("answer"));

            List<String> options = new ArrayList<>();
            options.add(option1);
            options.add(option2);
            options.add(option3);
            options.add(option4);

            Collections.shuffle(options);

            correctAnswerIndex = options.indexOf(getCorrectAnswer(option1, option2, option3, option4, correctAnswer)) + 1;

            textViewQuestion.setText(question);
            buttonOption1.setText(options.get(0));
            buttonOption2.setText(options.get(1));
            buttonOption3.setText(options.get(2));
            buttonOption4.setText(options.get(3));

            buttonOption1.setTag(String.valueOf(1));
            buttonOption2.setTag(String.valueOf(2));
            buttonOption3.setTag(String.valueOf(3));
            buttonOption4.setTag(String.valueOf(4));

            buttonOption1.setBackgroundColor(Color.parseColor("#6200EE"));
            buttonOption2.setBackgroundColor(Color.parseColor("#6200EE"));
            buttonOption3.setBackgroundColor(Color.parseColor("#6200EE"));
            buttonOption4.setBackgroundColor(Color.parseColor("#6200EE"));
        } else {
            showResult();
        }
    }

    private String getCorrectAnswer(String option1, String option2, String option3, String option4, int correctAnswer) {
        switch (correctAnswer) {
            case 1:
                return option1;
            case 2:
                return option2;
            case 3:
                return option3;
            case 4:
                return option4;
            default:
                return option1;
        }
    }

    private void checkAnswer(Button selectedButton) {
        int selectedAnswerIndex = Integer.parseInt((String) selectedButton.getTag());
        if (selectedAnswerIndex == correctAnswerIndex) {
            selectedButton.setBackgroundColor(Color.GREEN);
            correctAnswersCount++;
        } else {
            selectedButton.setBackgroundColor(Color.RED);
            showCorrectAnswer();
        }
        currentQuestionIndex++;
        selectedButton.postDelayed(new Runnable() {
            @Override
            public void run() {
                loadQuestion();
            }
        }, 1000);
    }

    private void showCorrectAnswer() {
        switch (correctAnswerIndex) {
            case 1:
                buttonOption1.setBackgroundColor(Color.GREEN);
                break;
            case 2:
                buttonOption2.setBackgroundColor(Color.GREEN);
                break;
            case 3:
                buttonOption3.setBackgroundColor(Color.GREEN);
                break;
            case 4:
                buttonOption4.setBackgroundColor(Color.GREEN);
                break;
        }
    }

    private void showResult() {
        Intent intent = new Intent(WorldCupQuizActivity.this, ResultActivity.class);
        intent.putExtra("correctAnswersCount", correctAnswersCount);
        intent.putExtra("totalQuestions", currentQuestionIndex);
        intent.putExtra("username", username);
        intent.putExtra("quizType", quizType);
        startActivity(intent);
        finish();
    }

    private void showExitConfirmationDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setMessage("Do you want to end the quiz?");
        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                Intent intent = new Intent(WorldCupQuizActivity.this, MainActivity.class);
                startActivity(intent);
                finish();
            }
        });
        builder.setNegativeButton("No", null);
        builder.show();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();
        }
        if (db != null && db.isOpen()) {
            db.close();
        }
    }
}
